name: Jike Info Collector Task

on:
  schedule:
    # 北京时间8点到24点每半个小时执行一次爬取任务
    # 北京时间8点=UTC0点，北京时间24点=UTC16点
    - cron: '0,30 0-16 * * *'
    # 每天北京时间8点运行清理任务（UTC时间0点）
    - cron: '0 0 * * *'
    # 北京时间9点、21点运行报告任务（对应UTC 1:00 / 13:00）
    - cron: '0 1,13 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: '要手动执行的任务'
        required: true
        default: 'crawl'
        type: choice
        options:
        - crawl
        - cleanup
        - stats
        - report
        - full
      report_type:
        description: '报告类型（仅report任务）'
        required: false
        default: 'daily_hotspot'
        type: choice
        options:
        - daily_hotspot
        - weekly_digest
        - kol_trajectory
        - quarterly_narrative
      hours_back:
        description: '分析回溯小时数（daily_hotspot任务）'
        required: false
        type: number
        default: 24
      days_back:
        description: '分析回溯天数（weekly/quarterly任务）'
        required: false
        type: number
        default: 7
      kol_user_ids:
        description: 'KOL用户ID列表（逗号分隔，仅kol_trajectory任务）'
        required: false
        type: string

jobs:
  crawl:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0,30 0-16 * * *' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'crawl' || github.event.inputs.task == 'full'))
    env:
      # --- 数据库密钥 ---
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}
      # --- 爬虫配置 (可选) ---
      EXECUTOR_MAX_WORKERS: ${{ secrets.EXECUTOR_MAX_WORKERS }}
      CRAWLER_REQUEST_TIMEOUT: ${{ secrets.CRAWLER_REQUEST_TIMEOUT }}
      CRAWLER_MAX_RETRIES: ${{ secrets.CRAWLER_MAX_RETRIES }}
      RSSHUB_HOSTS: ${{ secrets.RSSHUB_HOSTS }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run jike crawler
      run: python main.py --task crawl

  cleanup:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 * * *' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'cleanup' || github.event.inputs.task == 'full'))
    env:
      # --- 数据库密钥 ---
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}
      # --- 数据保留配置 (可选) ---
      DATA_RETENTION_DAYS: ${{ secrets.DATA_RETENTION_DAYS }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run cleanup
      run: python main.py --task cleanup

  stats:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 * * *' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task == 'stats' || github.event.inputs.task == 'full'))
    env:
      # --- 数据库密钥 ---
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Get stats
      run: python main.py --task stats

  full:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'full'
    env:
      # --- 数据库密钥 ---
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}

      # --- LLM API配置 (报告生成必需) ---
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
      OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
      LLM_MAX_CONTENT_LENGTH: ${{ secrets.LLM_MAX_CONTENT_LENGTH }}

      # --- Notion集成配置 (可选) ---
      NOTION_INTEGRATION_TOKEN: ${{ secrets.NOTION_INTEGRATION_TOKEN }}
      NOTION_PARENT_PAGE_ID: ${{ secrets.NOTION_PARENT_PAGE_ID }}

      # --- 爬虫配置 (可选) ---
      EXECUTOR_MAX_WORKERS: ${{ secrets.EXECUTOR_MAX_WORKERS }}
      CRAWLER_REQUEST_TIMEOUT: ${{ secrets.CRAWLER_REQUEST_TIMEOUT }}
      CRAWLER_MAX_RETRIES: ${{ secrets.CRAWLER_MAX_RETRIES }}
      RSSHUB_HOSTS: ${{ secrets.RSSHUB_HOSTS }}
      DATA_RETENTION_DAYS: ${{ secrets.DATA_RETENTION_DAYS }}

      # --- 分析配置 (可选) ---
      ANALYSIS_HOURS_BACK_DAILY: ${{ secrets.ANALYSIS_HOURS_BACK_DAILY }}
      ANALYSIS_DAYS_BACK_WEEKLY: ${{ secrets.ANALYSIS_DAYS_BACK_WEEKLY }}
      ANALYSIS_DAYS_BACK_QUARTERLY: ${{ secrets.ANALYSIS_DAYS_BACK_QUARTERLY }}
      ANALYSIS_DAYS_BACK_KOL: ${{ secrets.ANALYSIS_DAYS_BACK_KOL }}
      ANALYSIS_KOL_USER_IDS: ${{ secrets.ANALYSIS_KOL_USER_IDS }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run full task sequence
      run: python main.py --task full

  report:
    runs-on: ubuntu-latest
    # 北京时间9点、21点运行一次
    if: github.event.schedule == '0 1,13 * * *' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'report')
    env:
      # --- 数据库密钥 ---
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}

      # --- LLM API配置 (报告生成必需) ---
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
      OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
      LLM_MAX_CONTENT_LENGTH: ${{ secrets.LLM_MAX_CONTENT_LENGTH }}

      # --- Notion集成配置 (可选) ---
      NOTION_INTEGRATION_TOKEN: ${{ secrets.NOTION_INTEGRATION_TOKEN }}
      NOTION_PARENT_PAGE_ID: ${{ secrets.NOTION_PARENT_PAGE_ID }}

      # --- 分析配置 (可选) ---
      ANALYSIS_HOURS_BACK_DAILY: ${{ secrets.ANALYSIS_HOURS_BACK_DAILY }}
      ANALYSIS_DAYS_BACK_WEEKLY: ${{ secrets.ANALYSIS_DAYS_BACK_WEEKLY }}
      ANALYSIS_DAYS_BACK_QUARTERLY: ${{ secrets.ANALYSIS_DAYS_BACK_QUARTERLY }}
      ANALYSIS_DAYS_BACK_KOL: ${{ secrets.ANALYSIS_DAYS_BACK_KOL }}
      ANALYSIS_KOL_USER_IDS: ${{ secrets.ANALYSIS_KOL_USER_IDS }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run intelligent report generation
      run: |
        set -euo pipefail

        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual run: use parameters from input
          report_type="${{ github.event.inputs.report_type || 'daily_hotspot' }}"

          if [ "$report_type" = "daily_hotspot" ]; then
            python main.py --task report --report-type daily_hotspot --hours-back ${{ github.event.inputs.hours_back || 24 }}
          elif [ "$report_type" = "weekly_digest" ]; then
            python main.py --task report --report-type weekly_digest --days-back ${{ github.event.inputs.days_back || 7 }}
          elif [ "$report_type" = "quarterly_narrative" ]; then
            python main.py --task report --report-type quarterly_narrative --days-back ${{ github.event.inputs.days_back || 90 }}
          elif [ "$report_type" = "kol_trajectory" ]; then
            if [ -n "${{ github.event.inputs.kol_user_ids }}" ]; then
              python main.py --task report --report-type kol_trajectory --kol-user-ids "${{ github.event.inputs.kol_user_ids }}" --days-back ${{ github.event.inputs.days_back || 30 }}
            else
              python main.py --task report --report-type kol_trajectory --days-back ${{ github.event.inputs.days_back || 30 }}
            fi
          fi
        else
          # Scheduled run: generate daily hotspot report
          python main.py --task report --report-type daily_hotspot --hours-back 24
        fi